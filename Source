local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Booth Sniper Pro", "DarkTheme")

local HttpService = game:GetService("HttpService")
local BoothService = game:GetService("Workspace"):FindFirstChild("Booths")
local TeleportService = game:GetService("TeleportService")
local Player = game:GetService("Players").LocalPlayer
local PlaceId = game.PlaceId

local SniperSettings = {
    maxPrice = 1000,
    snipeEnabled = false,
    selectedExclusives = {},
}

local HugePets = {
    "Huge Cat",
    "Huge Dalmatian",
    "Huge Dog",
    "Huge Calico Cat",
    "Huge Shiba",
    "Huge Dragon",
    "Huge Nightmare Corgi",
    "Huge Inferno Cat",
    "Huge Mosaic Griffin",
    "Huge Red Dragon",
    "Huge Cosmic Axolotl",
    "Huge Fossil Dragon",
    "Huge Kitsune Fox",
    "Huge Hell Rock"
}

local Tab = Window:NewTab("Auto-Snipe")
local Section = Tab:NewSection("Sniper Settings")

Section:NewTextBox("Max Price", "Set the max price for items", function(value)
    SniperSettings.maxPrice = tonumber(value)
end)

Section:NewButton("Start Sniping", "Starts the auto-sniper", function()
    SniperSettings.snipeEnabled = true
    logMessage("[INFO]", "Auto-sniper started!")
    autoSniper()
end)

Section:NewButton("Stop Sniping", "Stops the auto-sniper", function()
    SniperSettings.snipeEnabled = false
    logMessage("[INFO]", "Auto-sniper stopped!")
end)

local HugeTab = Window:NewTab("Huge Pets")
local HugeSection = HugeTab:NewSection("Select Huge Pets to Snipe")

for _, pet in pairs(HugePets) do
    HugeSection:NewToggle(pet, "Toggle to snipe " .. pet, function(state)
        SniperSettings.selectedExclusives[pet] = state
        logMessage("[SELECT]", "Snipe " .. (state and "enabled" or "disabled") .. " for " .. pet)
    end)
end

local LogsTab = Window:NewTab("Logs")
local LogsSection = LogsTab:NewSection("Sniping Logs")
LogsSection:NewButton("Clear Logs", "Clear all log messages", function()
    for _, element in pairs(LogsSection:GetChildren()) do
        element:Destroy()
    end
    logMessage("[INFO]", "Logs cleared.")
end)

function logMessage(tag, message)
    LogsSection:NewLabel(string.format("[%s] %s", tag, message))
    print(tag, message)
end

function isNameMatch(selectedName, petName)
    return string.lower(petName):find(string.lower(selectedName)) ~= nil
end

function teleportToBooth(booth)
    if booth:FindFirstChild("HumanoidRootPart") then
        Player.Character:SetPrimaryPartCFrame(booth.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0))
        wait(0.2)
    end
end

function serverHop()
    logMessage("[INFO]", "Server hopping...")
    local servers = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Asc&limit=100")).data
    for _, server in ipairs(servers) do
        if server.id ~= game.JobId and server.playing < server.maxPlayers then
            TeleportService:TeleportToPlaceInstance(PlaceId, server.id)
            break
        end
    end
end

function autoSniper()
    while SniperSettings.snipeEnabled do
        local foundItem = false
        for _, booth in pairs(BoothService:GetChildren()) do
            teleportToBooth(booth)
            local boothOwner = booth:FindFirstChild("Owner")
            local items = booth:FindFirstChild("PetsForSale")

            if boothOwner and items then
                for _, pet in pairs(items:GetChildren()) do
                    local price = pet:FindFirstChild("Price") and pet.Price.Value or 0
                    local petName = pet:FindFirstChild("Name") and pet.Name.Value or "Unknown Item"

                    for selectedPet, enabled in pairs(SniperSettings.selectedExclusives) do
                        if enabled and isNameMatch(selectedPet, petName) and price <= SniperSettings.maxPrice then
                            logMessage("[SNIPE]", "Attempting to buy " .. petName .. " for " .. price .. " gems")
                            buyPet(booth, pet)
                            foundItem = true
                        end
                    end
                end
            end
        end

        if not foundItem then
            serverHop()
        else
            wait(0.5)
        end
    end
end

function buyPet(booth, pet)
    local success, err = pcall(function()
        local buyButton = booth:FindFirstChild("BuyButton")
        if buyButton then
            fireclickdetector(buyButton.ClickDetector)
            logMessage("[INFO]", "Successfully purchased " .. pet.Name.Value)
            print("[INFO] Successfully purchased " .. pet.Name.Value)
            wait(2)
        else
            logMessage("[ERROR]", "No buy button detected for " .. pet.Name.Value)
            print("[ERROR] No buy button detected for " .. pet.Name.Value)
        end
    end)

    if not success then
        logMessage("[ERROR]", "Purchase failed: " .. tostring(err))
        print("[ERROR] Purchase failed: " .. tostring(err))
    end
end

local UIS = game:GetService("UserInputService")
UIS.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.P then
        Window:Toggle(not Window.Enabled)
    end
end)
